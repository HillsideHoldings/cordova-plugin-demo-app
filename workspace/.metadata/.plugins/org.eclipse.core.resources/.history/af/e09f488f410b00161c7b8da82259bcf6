package org.apache.cordova.media.lockscreencontrols;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.AudioManager;
import android.media.MediaMetadataRetriever;
import android.media.RemoteControlClient;
import android.widget.Toast;

import com.billinar.mediabufferplugin.R;

/**
 * Created by Bilal on 24/04/2016.
 */
public class LockScreenMediaController implements MusicFocusable {

    // do we have audio focus?
    enum AudioFocus {
        NoFocusNoDuck,    // we don't have audio focus, and can't duck
        NoFocusCanDuck,   // we don't have focus, but can play at a low volume ("ducking")
        Focused           // we have full audio focus
    }

    AudioFocus mAudioFocus = AudioFocus.NoFocusNoDuck;

    public enum MediaState {
        PLAYING, PAUSED, STOPPED
    }

    // our AudioFocusHelper object, if it's available (it's available on SDK level >= 8)
    // If not available, this will be null. Always check for null before using!
    AudioFocusHelper mAudioFocusHelper = null;

    // our RemoteControlClient object, which will use remote control APIs available in
    // SDK level >= 14, if they're available.
    RemoteControlClientCompat mRemoteControlClientCompat;

    // The component name of MusicIntentReceiver, for use with media button and remote control
    // APIs
    ComponentName mMediaButtonReceiverComponent;
    AudioManager mAudioManager;
    NotificationManager mNotificationManager;
    Notification.Builder mNotificationBuilder = null;

    Context mContext;

    public LockScreenMediaController(Context context) {
        mContext = context;
        mNotificationManager = (NotificationManager) context.getSystemService(context.NOTIFICATION_SERVICE);
        mAudioManager = (AudioManager) context.getSystemService(context.AUDIO_SERVICE);

        // create the Audio Focus Helper, if the Audio Focus feature is available (SDK 8 or above)
        if (android.os.Build.VERSION.SDK_INT >= 8)
            mAudioFocusHelper = new AudioFocusHelper(context, this);
        else
            mAudioFocus = AudioFocus.Focused; // no focus feature, so we always "have" audio focus

        mMediaButtonReceiverComponent = new ComponentName(context, MusicIntentReceiver.class);

        // Use the media button APIs (if available) to register ourselves for media button
        // events

        MediaButtonHelper.registerMediaButtonEventReceiverCompat(
                mAudioManager, mMediaButtonReceiverComponent);

        // Use the remote control APIs (if available) to set the playback state

        if (mRemoteControlClientCompat == null) {
            Intent intent = new Intent(Intent.ACTION_MEDIA_BUTTON);
            intent.setComponent(mMediaButtonReceiverComponent);
            mRemoteControlClientCompat = new RemoteControlClientCompat(
                    PendingIntent.getBroadcast(context /*context*/,
                            0 /*requestCode, ignored*/, intent /*intent*/, 0 /*flags*/));
            RemoteControlHelper.registerRemoteControlClient(mAudioManager,
                    mRemoteControlClientCompat);
        }
    }

    public void setMediaState(MediaState mediaState) {
        switch (mediaState) {
            case PLAYING:
                tryToGetAudioFocus();
                // Tell any remote controls that our playback state is 'playing'.
                if (mRemoteControlClientCompat != null) {
                    mRemoteControlClientCompat
                            .setPlaybackState(RemoteControlClient.PLAYSTATE_PLAYING);
                    mRemoteControlClientCompat.setTransportControlFlags(

                                    RemoteControlClient.FLAG_KEY_MEDIA_NEXT |
                                    RemoteControlClient.FLAG_KEY_MEDIA_PREVIOUS |
                                    RemoteControlClient.FLAG_KEY_MEDIA_PLAY_PAUSE |
                                    RemoteControlClient.FLAG_KEY_MEDIA_STOP);
                }
                break;

            case PAUSED:
                // Tell any remote controls that our playback state is 'paused'.
                if (mRemoteControlClientCompat != null) {
                    mRemoteControlClientCompat
                            .setPlaybackState(RemoteControlClient.PLAYSTATE_PAUSED);
                }
                break;

            case STOPPED:
                giveUpAudioFocus();

                // Tell any remote controls that our playback state is 'paused'.
                if (mRemoteControlClientCompat != null) {
                    mRemoteControlClientCompat
                            .setPlaybackState(RemoteControlClient.PLAYSTATE_STOPPED);
                }
                break;
        }
    }

    public void setMetaData(String title, String subTitle, long duration, Bitmap backgroundImage){

//        if(backgroundImage == null){
//            backgroundImage = BitmapFactory.decodeResource(mContext.getResources(), R.drawable.sample_img);
//        }
        // Update the remote controls
        mRemoteControlClientCompat.editMetadata(true)
                //.putString(MediaMetadataRetriever.METADATA_KEY_ARTIST, artist)
                .putString(MediaMetadataRetriever.METADATA_KEY_ALBUM, subTitle)
                .putString(MediaMetadataRetriever.METADATA_KEY_TITLE, title)
                .putLong(MediaMetadataRetriever.METADATA_KEY_DURATION,
                        duration)
                        // TODO: fetch real item artwork
                .putBitmap(
                        RemoteControlClientCompat.MetadataEditorCompat.METADATA_KEY_ARTWORK,
                        backgroundImage)
                .apply();
    }

    private void tryToGetAudioFocus() {
        if (mAudioFocus != AudioFocus.Focused && mAudioFocusHelper != null
                && mAudioFocusHelper.requestFocus())
            mAudioFocus = AudioFocus.Focused;
    }

    void giveUpAudioFocus() {
        if (mAudioFocus == AudioFocus.Focused && mAudioFocusHelper != null
                && mAudioFocusHelper.abandonFocus())
            mAudioFocus = AudioFocus.NoFocusNoDuck;
    }

    @Override
    public void onGainedAudioFocus() {
        Toast.makeText(mContext, "gained audio focus.", Toast.LENGTH_SHORT).show();
        mAudioFocus = AudioFocus.Focused;

        // restart media player with new focus settings
//        if (mState == State.Playing)
//            configAndStartMediaPlayer();
    }

    @Override
    public void onLostAudioFocus(boolean canDuck) {
        Toast.makeText(mContext, "lost audio focus." + (canDuck ? "can duck" :
                "no duck"), Toast.LENGTH_SHORT).show();
        mAudioFocus = canDuck ? AudioFocus.NoFocusCanDuck : AudioFocus.NoFocusNoDuck;

        // start/restart/pause media player with new focus settings
//        if (mPlayer != null && mPlayer.isPlaying())
//            configAndStartMediaPlayer();
    }


    /**
     * Reconfigures MediaPlayer according to audio focus settings and starts/restarts it. This
     * method starts/restarts the MediaPlayer respecting the current audio focus state. So if
     * we have focus, it will play normally; if we don't have focus, it will either leave the
     * MediaPlayer paused or set it to a low volume, depending on what is allowed by the
     * current focus settings. This method assumes mPlayer != null, so if you are calling it,
     * you have to do so from a context where you are sure this is the case.
     */
    void configAndStartMediaPlayer() {
//        if (mAudioFocus == AudioFocus.NoFocusNoDuck) {
//            // If we don't have audio focus and can't duck, we have to pause, even if mState
//            // is State.Playing. But we stay in the Playing state so that we know we have to resume
//            // playback once we get the focus back.
//            if (mPlayer.isPlaying()) mPlayer.pause();
//            return;
//        }
//        else if (mAudioFocus == AudioFocus.NoFocusCanDuck)
//            mPlayer.setVolume(DUCK_VOLUME, DUCK_VOLUME);  // we'll be relatively quiet
//        else
//            mPlayer.setVolume(1.0f, 1.0f); // we can be loud
//
//        if (!mPlayer.isPlaying()) mPlayer.start();
    }
}
